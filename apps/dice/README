DICE is an open source monitoring system for global invariants running on
resource-constrained networked embedded systems developed by Stefan Guna.

DICE provides a simple, declarative language to express the invariants to be
monitored. The network is tasked as a whole and together monitor invariants
such as:
    forall m, n: temp@m - temp@n < 10
    forall m, n: temp@m > 25 -> fan_active@n = TRUE
where temp@m references the temperature at node m. The invariant building blocks
are local node state (e.g., NODE_ATTRIBUTE@quantifier) that are combined to form
global predicates expressed at network level.

To get started:
1. Edit ../../tools/dice-compiler/attributes.att and declare node attributes.
2. Edit ../../tools/dice-compiler/constraints.dc to decalare the invariant to be
monitored.
3. Build the compiler, i.e., mvn compile.
4. Run the eu.guna.dice.DiceCompiler on the two files.
5. Edit attributes_data.c to insert the code handling attribute values. Have a
look at attributes.h to identify the code you need to write.
6. TODO Add violation handling code.
7. Compile and run!

